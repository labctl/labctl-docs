import{_ as e,o as s,c as a,a as t}from"./app.1c86f032.js";const A=JSON.parse('{"title":"Labctl serve","description":"","frontmatter":{},"headers":[{"level":2,"title":"Start the web server","slug":"start-the-web-server"},{"level":2,"title":"CLI commands","slug":"cli-commands"},{"level":2,"title":"CLI Flags","slug":"cli-flags"}],"relativePath":"reference/serve.md","lastUpdated":1661370156000}'),l={name:"reference/serve.md"},n=t(`<h1 id="labctl-serve" tabindex="-1">Labctl serve <a class="header-anchor" href="#labctl-serve" aria-hidden="true">#</a></h1><h2 id="start-the-web-server" tabindex="-1">Start the web server <a class="header-anchor" href="#start-the-web-server" aria-hidden="true">#</a></h2><p>The Config Engine UI can be started with the <a href="/reference/serve.html"><code>labctl serve</code></a> command.</p><p>Once the server is started you should be able to open the suggested URLs with your browser</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">$ labctl serve -t topo.clab.yaml -p ./ --addr :8080</span></span>
<span class="line"><span style="color:#A6ACCD;">INFO[0000] Parsing &amp; checking topology file: topo.clab.yaml</span></span>
<span class="line"><span style="color:#A6ACCD;">INFO[0000] Access the web server on http://localhost:8080 or http://10.10.56.51:8080</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="cli-commands" tabindex="-1">CLI commands <a class="header-anchor" href="#cli-commands" aria-hidden="true">#</a></h2><details class="details custom-block"><summary><code>labctl serve --help</code></summary><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">Usage: labctl serve</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">Serve the web UI.</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">Flags:</span></span>
<span class="line"><span style="color:#A6ACCD;">  -h, --help                                 Show context-sensitive help.</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">  -t, --topo=STRING                          Topology file</span></span>
<span class="line"><span style="color:#A6ACCD;">  -p, --template-paths=TEMPLATE-PATHS,...    Paths to search for templates</span></span>
<span class="line"><span style="color:#A6ACCD;">      --addr=&quot;:8080&quot;                         Serve on addr.</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">Global Flags</span></span>
<span class="line"><span style="color:#A6ACCD;">  -d, --debug=INT          Enable debug mode.</span></span>
<span class="line"><span style="color:#A6ACCD;">      --settings=STRING    Settings yaml file.</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div></details><h2 id="cli-flags" tabindex="-1">CLI Flags <a class="header-anchor" href="#cli-flags" aria-hidden="true">#</a></h2><p>The following flags are available for the config commands</p><table><thead><tr><th style="text-align:left;">Flag</th><th></th><th></th><th>Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>--topo</code></td><td><code>-t</code></td><td>\u2714</td><td>the topology file</td></tr><tr><td style="text-align:left;"><code>--template-paths</code></td><td><code>-p</code></td><td>\u2714</td><td>paths to search for templates (in order)</td></tr><tr><td style="text-align:left;"><code>--debug</code></td><td><code>-d</code></td><td></td><td>debug count, i.e. <code>-d</code>, <code>-ddd</code> or <code>--debug=3</code></td></tr><tr><td style="text-align:left;"><code>--settings</code></td><td></td><td></td><td>Settings file</td></tr></tbody></table>`,10),o=[n];function c(d,r,p,i,h,g){return s(),a("div",null,o)}const b=e(l,[["render",c]]);export{A as __pageData,b as default};
